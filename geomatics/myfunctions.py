# Function to convert decimal degrees to degree minutes and seconds
def degtodms(decimal, decimals=0):
    dd = int(decimal)
    decimal = abs(decimal - dd) * 60
    mm = int(decimal)
    ss = (decimal - mm) * 60
    if mm == 59 and round(ss) == 60:
        dd += 1; mm = 0; ss = 0
    if round(ss) == 60:
        mm += 1; ss = 0
    return f'{dd}Â° {mm}\' {ss:.{decimals}f}"'

import sympy as sp

def round_matrix(matrix, digits, method='sig'):
    """
    Round each element of a Sympy Matrix, either by significant figures or decimal places.
    :param matrix: Sympy Matrix
    :param digits: Number of digits (sig figs if method is significant, or decimal places if decimal)
    :param method: 'sig' or 'significant' for significant figures; 'dec' or 'decimal' for decimal places
    :return: Rounded Sympy Matrix
    """
    # normalize method keyword
    m = method.lower()
    if m in ('sig', 'significant'):
        use_sig = True
    elif m in ('dec', 'decimal'):
        use_sig = False
    else:
        raise ValueError(f"Invalid method '{method}'. Use 'sig'/'significant' or 'dec'/'decimal'.")
    rounded_matrix = matrix.copy()
    for i in range(matrix.rows):
        for j in range(matrix.cols):
            val = matrix[i, j]
            if use_sig:
                out = sp.N(val, digits)
            else:
                try:
                    out = round(float(val), digits)
                except Exception:
                    out = val
            rounded_matrix[i, j] = out
    return rounded_matrix

from math import floor, log10
def roundsf(value, n):
    if value == 0:
        return 0
    # Calculate the order of magnitude
    magnitude = int(floor(log10(abs(value)))) + 1
    # Calculate the rounding factor based on the desired significant figures
    rounding_factor = n - magnitude
    # Round the value using the rounding factor
    rounded_value = round(value, rounding_factor)
    return rounded_value

import numpy as np
from typing import Union

def tau(alpha: float = 0.05, n_obs: int, df: int) -> float:
    """
    Get Pope's Tau critical value for outlier detection in geodetic networks.
    
    Parameters:
    -----------
    alpha : float, default=0.05
        Significance level (0.001, 0.002, 0.007, 0.009, 0.01, 0.02, 0.025, 0.05, 0.1)
    n_obs : int
        Number of observations (3-11 supported directly, others interpolated)
    df : int  
        Degrees of freedom (1-10 supported)

    Returns:
    --------
    float
        Critical value for Pope's Tau test
        
    Example:
    --------
    >>> critical_val = get_tau_critical(alpha=0.05, n_obs=7, df=3)
    >>> print(f"Critical value: {critical_val}")
    Critical value: 1.719
    """
    
    # Pope's Tau Critical Values Table
    tau_table = {
        3: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.412, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414}
        },
        4: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.413, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.687, 0.05: 1.710, 0.025: 1.721, 0.02: 1.723, 0.01: 1.728, 0.009: 1.728, 0.007: 1.729, 0.002: 1.731, 0.001: 1.732}
        },
        5: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.413, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.696, 0.05: 1.714, 0.025: 1.723, 0.02: 1.725, 0.01: 1.729, 0.009: 1.729, 0.007: 1.730, 0.002: 1.731, 0.001: 1.732},
            4: {0.1: 1.865, 0.05: 1.916, 0.025: 1.948, 0.02: 1.955, 0.01: 1.972, 0.009: 1.974, 0.007: 1.978, 0.002: 1.990, 0.001: 1.994}
        },
        6: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.702, 0.05: 1.717, 0.025: 1.725, 0.02: 1.726, 0.01: 1.729, 0.009: 1.729, 0.007: 1.730, 0.002: 1.731, 0.001: 1.732},
            4: {0.1: 1.880, 0.05: 1.926, 0.025: 1.954, 0.02: 1.960, 0.01: 1.975, 0.009: 1.977, 0.007: 1.980, 0.002: 1.991, 0.001: 1.995},
            5: {0.1: 1.991, 0.05: 2.065, 0.025: 2.117, 0.02: 2.129, 0.01: 2.161, 0.009: 2.165, 0.007: 2.173, 0.002: 2.203, 0.001: 2.212}
        },
        7: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.706, 0.05: 1.719, 0.025: 1.726, 0.02: 1.727, 0.01: 1.730, 0.009: 1.730, 0.007: 1.730, 0.002: 1.732, 0.001: 1.732},
            4: {0.1: 1.892, 0.05: 1.933, 0.025: 1.958, 0.02: 1.964, 0.01: 1.977, 0.009: 1.979, 0.007: 1.982, 0.002: 1.992, 0.001: 1.995},
            5: {0.1: 2.009, 0.05: 2.078, 0.025: 2.125, 0.02: 2.137, 0.01: 2.167, 0.009: 2.170, 0.007: 2.178, 0.002: 2.205, 0.001: 2.214},
            6: {0.1: 2.087, 0.05: 2.179, 0.025: 2.247, 0.02: 2.265, 0.01: 2.310, 0.009: 2.316, 0.007: 2.329, 0.002: 2.377, 0.001: 2.395}
        },
        8: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.709, 0.05: 1.721, 0.025: 1.727, 0.02: 1.728, 0.01: 1.730, 0.009: 1.730, 0.007: 1.731, 0.002: 1.732, 0.001: 1.732},
            4: {0.1: 1.901, 0.05: 1.939, 0.025: 1.962, 0.02: 1.967, 0.01: 1.979, 0.009: 1.981, 0.007: 1.984, 0.002: 1.993, 0.001: 1.996},
            5: {0.1: 2.024, 0.05: 2.088, 0.025: 2.133, 0.02: 2.144, 0.01: 2.171, 0.009: 2.174, 0.007: 2.182, 0.002: 2.207, 0.001: 2.216},
            6: {0.1: 2.106, 0.05: 2.194, 0.025: 2.258, 0.02: 2.274, 0.01: 2.318, 0.009: 2.323, 0.007: 2.335, 0.002: 2.381, 0.001: 2.397},
            7: {0.1: 2.164, 0.05: 2.271, 0.025: 2.351, 0.02: 2.373, 0.01: 2.431, 0.009: 2.439, 0.007: 2.456, 0.002: 2.521, 0.001: 2.547}
        },
        9: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.712, 0.05: 1.722, 0.025: 1.727, 0.02: 1.728, 0.01: 1.730, 0.009: 1.730, 0.007: 1.731, 0.002: 1.732, 0.001: 1.732},
            4: {0.1: 1.909, 0.05: 1.943, 0.025: 1.965, 0.02: 1.970, 0.01: 1.981, 0.009: 1.982, 0.007: 1.985, 0.002: 1.994, 0.001: 1.996},
            5: {0.1: 2.036, 0.05: 2.097, 0.025: 2.139, 0.02: 2.149, 0.01: 2.175, 0.009: 2.178, 0.007: 2.185, 0.002: 2.209, 0.001: 2.217},
            6: {0.1: 2.122, 0.05: 2.206, 0.025: 2.267, 0.02: 2.283, 0.01: 2.324, 0.009: 2.329, 0.007: 2.341, 0.002: 2.384, 0.001: 2.400},
            7: {0.1: 2.184, 0.05: 2.286, 0.025: 2.363, 0.02: 2.384, 0.01: 2.440, 0.009: 2.447, 0.007: 2.463, 0.002: 2.526, 0.001: 2.551},
            8: {0.1: 2.229, 0.05: 2.346, 0.025: 2.438, 0.02: 2.463, 0.01: 2.531, 0.009: 2.540, 0.007: 2.561, 0.002: 2.643, 0.001: 2.677}
        },
        10: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.714, 0.05: 1.723, 0.025: 1.728, 0.02: 1.729, 0.01: 1.730, 0.009: 1.730, 0.007: 1.731, 0.002: 1.732, 0.001: 1.732},
            4: {0.1: 1.915, 0.05: 1.947, 0.025: 1.967, 0.02: 1.972, 0.01: 1.982, 0.009: 1.983, 0.007: 1.986, 0.002: 1.994, 0.001: 1.996},
            5: {0.1: 2.046, 0.05: 2.104, 0.025: 2.144, 0.02: 2.154, 0.01: 2.178, 0.009: 2.181, 0.007: 2.188, 0.002: 2.210, 0.001: 2.218},
            6: {0.1: 2.136, 0.05: 2.216, 0.025: 2.274, 0.02: 2.290, 0.01: 2.329, 0.009: 2.334, 0.007: 2.345, 0.002: 2.387, 0.001: 2.402},
            7: {0.1: 2.200, 0.05: 2.298, 0.025: 2.373, 0.02: 2.393, 0.01: 2.447, 0.009: 2.454, 0.007: 2.470, 0.002: 2.530, 0.001: 2.554},
            8: {0.1: 2.248, 0.05: 2.361, 0.025: 2.450, 0.02: 2.474, 0.01: 2.540, 0.009: 2.549, 0.007: 2.569, 0.002: 2.649, 0.001: 2.681},
            9: {0.1: 2.285, 0.05: 2.410, 0.025: 2.511, 0.02: 2.539, 0.01: 2.616, 0.009: 2.626, 0.007: 2.650, 0.002: 2.747, 0.001: 2.788}
        },
        11: {
            1: {0.1: 1.000, 0.05: 1.000, 0.025: 1.000, 0.02: 1.000, 0.01: 1.000, 0.009: 1.000, 0.007: 1.000, 0.002: 1.000, 0.001: 1.000},
            2: {0.1: 1.414, 0.05: 1.414, 0.025: 1.414, 0.02: 1.414, 0.01: 1.414, 0.009: 1.414, 0.007: 1.414, 0.002: 1.414, 0.001: 1.414},
            3: {0.1: 1.716, 0.05: 1.724, 0.025: 1.728, 0.02: 1.729, 0.01: 1.730, 0.009: 1.731, 0.007: 1.731, 0.002: 1.732, 0.001: 1.732},
            4: {0.1: 1.920, 0.05: 1.951, 0.025: 1.969, 0.02: 1.973, 0.01: 1.983, 0.009: 1.984, 0.007: 1.987, 0.002: 1.994, 0.001: 1.996},
            5: {0.1: 2.055, 0.05: 2.110, 0.025: 2.148, 0.02: 2.157, 0.01: 2.181, 0.009: 2.184, 0.007: 2.190, 0.002: 2.211, 0.001: 2.219},
            6: {0.1: 2.148, 0.05: 2.225, 0.025: 2.281, 0.02: 2.296, 0.01: 2.334, 0.009: 2.338, 0.007: 2.349, 0.002: 2.389, 0.001: 2.404},
            7: {0.1: 2.215, 0.05: 2.310, 0.025: 2.382, 0.02: 2.401, 0.01: 2.453, 0.009: 2.460, 0.007: 2.475, 0.002: 2.534, 0.001: 2.557},
            8: {0.1: 2.264, 0.05: 2.374, 0.025: 2.460, 0.02: 2.484, 0.01: 2.548, 0.009: 2.557, 0.007: 2.576, 0.002: 2.654, 0.001: 2.685},
            9: {0.1: 2.303, 0.05: 2.425, 0.025: 2.523, 0.02: 2.550, 0.01: 2.625, 0.009: 2.635, 0.007: 2.659, 0.002: 2.753, 0.001: 2.793},
            10: {0.1: 2.333, 0.05: 2.466, 0.025: 2.574, 0.02: 2.604, 0.01: 2.689, 0.009: 2.700, 0.007: 2.727, 0.002: 2.837, 0.001: 2.884}
        }
    }
    
    # Direct lookup if exact values exist
    if n_obs in tau_table and df in tau_table[n_obs] and alpha in tau_table[n_obs][df]:
        return tau_table[alpha][n_obs][df]
    
    # Simple interpolation/extrapolation for missing values
    available_n = sorted(tau_table.keys())
    available_alphas = [0.001, 0.002, 0.007, 0.009, 0.01, 0.02, 0.025, 0.05, 0.1]
    
    # Find closest n_obs
    if n_obs < min(available_n):
        closest_n = min(available_n)
    elif n_obs > max(available_n):
        closest_n = max(available_n)
    else:
        closest_n = min(available_n, key=lambda x: abs(x - n_obs))
    
    # Find closest alpha
    closest_alpha = min(available_alphas, key=lambda x: abs(x - alpha))
    
    # Find closest df
    available_df = list(tau_table[closest_n].keys())
    if df > max(available_df):
        closest_df = max(available_df)
    elif df < min(available_df):
        closest_df = min(available_df)
    else:
        closest_df = min(available_df, key=lambda x: abs(x - df))
    
    return tau_table[closest_alpha][closest_n][closest_df]

